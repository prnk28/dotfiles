#/usr/bin/env zsh

# =====================
# | 1.0 |  Path/Vars  |
# =====================

# =====================
# | 1.1 |  Functions  |
# =====================
function ghg() {
  gum spin --title "Fetching $1..." -- ghq get $1
  gum spin --title "Adding $1..." -- zoxide add $GHQ_ROOT/github.com/$1
}

function ghgu() {
    for repo in $(ghq list | grep "^github.com/"); do
        gum spin --spinner dot --title "Fetching $repo..." -- ghq get -u $repo
        gum log --level info "[Fetched] $repo âœ…"
    done
}

function ghn() {
  ORG_NAME=$(gum choose --header "Select parent org:" "sonr-io" "prnk28" "go-sonr" "gpm-tools" "pkl-sh")
  REPO_NAME=$(gum input --header "Enter a name for your new repo")
  if [ -z "$REPO_NAME" ]; then
    gum log --level error "Please enter a valid name for the repo and organization."
    return 1
  fi
  gh repo create $ORG_NAME/$REPO_NAME --private
  ghg $ORG_NAME/$REPO_NAME
  cd {{ .chezmoi.homeDir }}/code/github.com/$ORG_NAME/$REPO_NAME
}

function gop() {
  local repo=$(basename $PWD)
  if [[ "$repo" == ".dotfiles" ]]; then
    local url="https://github.com/prnk28/.dotfiles"
    {{ if eq .chezmoi.os "darwin" -}}
    open "$url"
    {{ else -}}
    xdg-open "$url"
    {{ end -}}
  else
    local host=$(basename $(dirname $(dirname $PWD)))
    local org=$(basename $(dirname $PWD))
    local url="https://$host/$org/$repo"
    {{ if eq .chezmoi.os "darwin" -}}
    open "$url"
    {{ else -}}
    xdg-open "$url"
    {{ end -}}
  fi
}

function edit_files() {
  if [[ $(jobs | wc -l) -gt 0 ]]; then
    fg
  else
  git ls-files | \
    grep -v -E '\.(pb|twirp)\.go$|_templ\.go$|\.pb\.gw\.go$|_gen\.go$|\.gen\.go$|mock_.*\.go$' | \
    xargs -I {} stat -c "%Y %n" {} 2>/dev/null | \
    sort -rn | \
    cut -d' ' -f2- | \
    fzf --preview 'bat --color=always --style=numbers --line-range=:500 {}' \
        --preview-window=right:60% \
        --bind 'ctrl-/:toggle-preview' \
        --bind 'enter:execute(${EDITOR:-nvim} {})' \
        --header 'ENTER to edit | CTRL-/ to toggle preview'
  fi
  zle && zle reset-prompt  # Force prompt redraw
}

function open_lazycommit() {
  /home/prad/.local/bin/gcai
  zle && zle reset-prompt  # Force prompt redraw
}

function open_github-issues() {
  /home/prad/.local/bin/github issues
  zle && zle reset-prompt  # Force prompt redraw
}

function open_github-prs() {
  /home/prad/.local/bin/github prs
  zle && zle reset-prompt  # Force prompt redraw
}

function open_github-actions() {
  /home/prad/.local/bin/github actions
  zle && zle reset-prompt  # Force prompt redraw
}

function open_repo() {
  local selected=$(ghq list | fzf --delimiter='/' --nth=-1)
  if [[ -n "$selected" ]]; then
    cd "$GHQ_ROOT/$selected"
    clear
  fi
  zle && zle reset-prompt  # Force prompt redraw
}


# =====================
# | 1.2 |   Aliases   |
# =====================

alias gg="lazygit"
alias ghd="gh dash"
alias gpu="git push --set-upstream origin HEAD"
alias gsb="git switch -"
alias gdf="git diff"
alias gdc='gum confirm "Reset local changes" && git reset --hard HEAD'
alias ghl="ghq list"
alias ghrm="ghq rm"
alias gghh="ghq get -"
alias e=edit_files
alias o=open_repo
alias gc=open_lazycommit
alias gha=open_github-actions
alias ghp=open_github-prs
alias ghi=open_github-issues

# =====================
# | 1.3 | Keybindings |
# =====================

zle -N open_lazycommit-widget open_lazycommit
bindkey '^G' open_lazycommit-widget

zle -N edit_files-widget edit_files
bindkey '^E' edit_files-widget

zle -N open_github-issues-widget open_github-issues
bindkey '^T' open_github-issues-widget

zle -N open_github-prs-widget open_github-prs
bindkey '^P' open_github-prs-widget

zle -N open_github-actions-widget open_github-actions
bindkey '^A' open_github-actions-widget

zle -N open_repo-widget open_repo
bindkey '^O' open_repo-widget
