#!/usr/bin/env bash
# tldraw-edit - Edit .tldr files in the browser

set -e

VERSION="1.0.0"

show_help() {
    cat << EOF
tldraw-edit - Edit .tldr files in the browser

Usage: tldraw-edit [OPTIONS] <file.tldr>

Options:
    -h, --help     Show this help message
    -v, --version  Show version
    -p, --port     Specify port (default: auto-select)

Examples:
    tldraw-edit drawings.tldr
    tldraw-edit -p 3000 drawings.tldr
    tldraw-edit ./path/to/drawings.tldr

EOF
}

# Parse arguments
PORT=""
TLDR_FILE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "tldraw-edit version $VERSION"
            exit 0
            ;;
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        *)
            TLDR_FILE="$1"
            shift
            ;;
    esac
done

# Validate file argument
if [ -z "$TLDR_FILE" ]; then
    echo "Error: No .tldr file specified"
    show_help
    exit 1
fi

# Convert to absolute path
TLDR_FILE=$(realpath "$TLDR_FILE")

# Check if file exists
if [ ! -f "$TLDR_FILE" ]; then
    echo "Error: File not found: $TLDR_FILE"
    exit 1
fi

# Find an available port if not specified
if [ -z "$PORT" ]; then
    PORT=3000
    while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; do
        PORT=$((PORT + 1))
    done
fi

echo "Starting tldraw editor for: $TLDR_FILE"
echo "Port: $PORT"

# Create temporary directory
TMP_DIR=$(mktemp -d)
TMP_HTML="$TMP_DIR/tldraw.html"
TMP_SERVER="$TMP_DIR/server.js"

# Cleanup function
cleanup() {
    echo ""
    echo "Shutting down tldraw editor..."
    [ -n "$SERVER_PID" ] && kill $SERVER_PID 2>/dev/null
    rm -rf "$TMP_DIR"
    exit 0
}

trap cleanup SIGINT SIGTERM EXIT

# Create HTML file
cat > "$TMP_HTML" << 'HTMLEOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>tldraw Editor</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: system-ui, -apple-system, sans-serif;
        }
        #container {
            position: fixed;
            inset: 0;
        }
        #status {
            position: fixed;
            bottom: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 10000;
        }
        .saved { background: rgba(0, 128, 0, 0.7) !important; }
        .error { background: rgba(255, 0, 0, 0.7) !important; }
    </style>
</head>
<body>
    <div id="container"></div>
    <div id="status">Loading...</div>
    <script type="module">
        import { Tldraw } from 'https://esm.sh/@tldraw/tldraw@2.0.0'
        import { createRoot } from 'https://esm.sh/react-dom@18.2.0/client'
        import { createElement } from 'https://esm.sh/react@18.2.0'

        const status = document.getElementById('status')
        let saveTimeout = null

        function updateStatus(message, type = 'normal') {
            status.textContent = message
            status.className = type
        }

        const snapshot = SNAPSHOT_DATA;

        const root = createRoot(document.getElementById('container'))
        
        let editor = null
        
        root.render(
            createElement(Tldraw, {
                snapshot: snapshot,
                onMount: (ed) => {
                    editor = ed
                    updateStatus('Ready')
                    
                    // Auto-save on changes with debounce
                    editor.store.listen((entry) => {
                        clearTimeout(saveTimeout)
                        saveTimeout = setTimeout(() => {
                            saveToFile()
                        }, 1000)
                    })
                }
            })
        )

        async function saveToFile() {
            if (!editor) return
            
            try {
                updateStatus('Saving...', 'normal')
                const currentSnapshot = editor.store.getSnapshot()
                
                const response = await fetch('/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(currentSnapshot)
                })
                
                if (response.ok) {
                    updateStatus('Saved ✓', 'saved')
                    setTimeout(() => updateStatus('Ready'), 2000)
                } else {
                    throw new Error('Save failed')
                }
            } catch (e) {
                console.error('Save failed:', e)
                updateStatus('Save failed ✗', 'error')
            }
        }

        // Manual save with Ctrl+S
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault()
                saveToFile()
            }
        })
    </script>
</body>
</html>
HTMLEOF

# Read and escape the snapshot data
SNAPSHOT_CONTENT=$(cat "$TLDR_FILE")
# Escape the content properly for JavaScript
ESCAPED_SNAPSHOT=$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('$TLDR_FILE', 'utf8'))))")

# Replace placeholder with actual data
sed -i.bak "s|SNAPSHOT_DATA|$ESCAPED_SNAPSHOT|g" "$TMP_HTML"
rm "$TMP_HTML.bak"

# Create Node.js server
cat > "$TMP_SERVER" << SERVEREOF
const http = require('http');
const fs = require('fs');

const tldrFile = '$TLDR_FILE';
const htmlFile = '$TMP_HTML';
const port = $PORT;

const server = http.createServer((req, res) => {
    // Enable CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    if (req.url === '/' || req.url === '/index.html') {
        try {
            const html = fs.readFileSync(htmlFile, 'utf8');
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(html);
        } catch (e) {
            res.writeHead(500);
            res.end('Error loading editor');
        }
    } else if (req.url === '/save' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', () => {
            try {
                // Validate JSON
                JSON.parse(body);
                fs.writeFileSync(tldrFile, body);
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true }));
            } catch (e) {
                console.error('Save error:', e);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: e.message }));
            }
        });
    } else {
        res.writeHead(404);
        res.end('Not found');
    }
});

server.listen(port, 'localhost', () => {
    console.log(\`Server running at http://localhost:\${port}\`);
});

process.on('SIGTERM', () => {
    server.close();
    process.exit(0);
});
SERVEREOF

# Start the server
node "$TMP_SERVER" &
SERVER_PID=$!

# Wait for server to start
sleep 1

# Check if server started successfully
if ! kill -0 $SERVER_PID 2>/dev/null; then
    echo "Error: Failed to start server"
    exit 1
fi

# Open in browser
URL="http://localhost:$PORT"
echo "Opening browser at $URL"

if command -v xdg-open > /dev/null; then
    xdg-open "$URL" 2>/dev/null
elif command -v open > /dev/null; then
    open "$URL"
elif command -v wslview > /dev/null; then
    wslview "$URL"
else
    echo "Could not detect browser opener. Please open: $URL"
fi

echo ""
echo "tldraw editor is running. Press Ctrl+C to stop."
echo "File: $TLDR_FILE"
echo ""

# Wait for server to be terminated
wait $SERVER_PID
