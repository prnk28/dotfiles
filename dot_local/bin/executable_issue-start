#!/usr/bin/env bash
set -e

# Define the KV namespace ID
KVN=3a872e35b85c49bb8f5fe753198b5848

# Initialize variables
NUMBER=""
REPO_PATH=""

# Reset in case getopts has been used previously in the shell
OPTIND=1

# Parse command-line options
while getopts "n:p:" opt; do
  case "$opt" in
    n)
      NUMBER=$OPTARG
      ;;
    p)
      REPO_PATH=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# Shift away the parsed options
shift $((OPTIND-1))

# Validate that required arguments are provided
if [ -z "$NUMBER" ]; then
  echo "Error: Issue number must be provided with the -n flag." >&2
  exit 1
fi

if [ -z "$REPO_PATH" ]; then
  echo "Error: Repository path must be provided with the -p flag." >&2
  exit 1
fi

# Function to generate a branch name from a GitHub issue.
# It runs within a subshell to execute 'gh' from the repository's path,
# ensuring it targets the correct repository without changing the
# script's working directory.
function branch-namer() {
    local title
    title=$( (cd "$REPO_PATH" && gh issue view "$NUMBER" | mods -R branch-namer) )
    echo "$title"
}

BRANCH=$(branch-namer)

# Function to insert the branch name and issue number into the KV store.
function insert-kv() {
  npx wrangler kv key put --namespace-id="$KVN" "$BRANCH" "$NUMBER"
}

insert-kv

# Create a new tmux window.
# -n sets the window name to the issue number.
# -c sets the working directory for the new window to the repository path.
# 'nvim' is then executed within that path.
tmux new-window -n "#$NUMBER" -c "$REPO_PATH" nvim
