#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Define the KV namespace ID as a constant.
readonly KVN="3a872e35b85c49bb8f5fe753198b5848"

# Initialize the repository path variable.
REPO_PATH=""

# A POSIX variable. Reset in case getopts has been used previously in the shell.
OPTIND=1

# Parse command-line options. The script requires a single '-p' flag
# for the repository path.
while getopts "p:" opt; do
  case "$opt" in
    p)
      REPO_PATH=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# Shift away the parsed options.
shift $((OPTIND-1))

# Validate that the repository path was provided.
if [ -z "$REPO_PATH" ]; then
  echo "Error: Repository path must be provided with the -p flag." >&2
  exit 1
fi

# Verify that the provided path is a valid directory.
if [ ! -d "$REPO_PATH" ]; then
  echo "Error: The path '$REPO_PATH' is not a valid directory." >&2
  exit 1
fi

# The main logic is encapsulated in a subshell. This prevents the 'cd' command
# from changing the working directory of the shell where the script is invoked.
(
  # Change the current directory to the specified repository path.
  cd "$REPO_PATH"

  # Determine the current Git branch name.
  # The 'git symbolic-ref' command is a more robust alternative to 'git branch --show-current'.
  CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
  if [ -z "$CURRENT_BRANCH" ]; then
      echo "Error: Could not determine the current git branch. Ensure you are in a git repository with a checked-out branch." >&2
      exit 1
  fi

  # Retrieve the issue number from the Cloudflare KV store. The branch name serves as the key.
  # The '--text' flag ensures the output is the raw value, not a JSON object.
  ISSUE_NUMBER=$(npx wrangler kv key get --namespace-id="$KVN" "$CURRENT_BRANCH" --text)
  if [ -z "$ISSUE_NUMBER" ]; then
      echo "Error: No issue number found for branch '$CURRENT_BRANCH'." >&2
      exit 1
  fi

  # Use the GitHub CLI to fetch the details of the issue corresponding to the retrieved number.
  # Pipe the output to 'glow' for stylized markdown rendering in the terminal.
  gh issue view "$ISSUE_NUMBER" | glow -p
)
