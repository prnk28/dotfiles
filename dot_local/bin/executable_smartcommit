#!/usr/bin/env bash
set -e

SCOPES_FILE=".github/scopes.json"

# Check if scopes file exists
if [[ ! -f "$SCOPES_FILE" ]]; then
    echo "No scopes.json found - processing all changes..."

    # Check for staged files first
    staged_diff=$(git diff --cached)

    # If no staged files, stage all unstaged tracked files
    if [[ -z "$staged_diff" ]]; then
        git add -u
        staged_diff=$(git diff --cached)
    fi

    if [[ -z "$staged_diff" ]]; then
        echo "No changes found"
        exit 0
    fi

    # Generate commit message using mods
    echo "Generating commit message..."
    message=$(echo "$staged_diff" | mods -R write-commit)

    echo ""
    echo "Commit message:"
    echo "$message"
    echo ""

    # Confirm and commit
    if gum confirm "Commit all changes?"; then
        git commit -m "$message"
        echo "✓ Committed all changes"
    fi

    exit 0
fi

# Get all changed files (both staged and unstaged) and find their scopes
echo "Finding scopes with changes..."

# Combine staged and unstaged files
CHANGED_FILES=$(git diff --cached --name-only; git diff --name-only | sort -u)

SCOPES=$(echo "$CHANGED_FILES" | while read file; do
    [[ -z "$file" ]] && continue
    jq -r --arg f "$file" '.[] | select($f | startswith(.path)) | .scope' "$SCOPES_FILE"
done | sort -u)

if [[ -z "$SCOPES" ]]; then
    echo "No changes found"
    exit 0
fi

echo "Scopes with changes: $SCOPES"
echo ""

# Save currently staged files to restore later
STAGED_FILES=$(git diff --cached --name-only)

# Process each scope
for scope in $SCOPES; do
    echo "Processing scope: $scope"

    # Get the path for this scope
    scope_path=$(jq -r --arg scope "$scope" '.[] | select(.scope == $scope) | .path' "$SCOPES_FILE")

    if [[ -z "$scope_path" ]]; then
        echo "Warning: Could not find path for scope $scope"
        continue
    fi

    # Reset staging area
    git reset HEAD -- . 2>/dev/null || true

    echo "  Staging files in $scope_path..."

    # Stage all tracked files in the scope's path (both previously staged and unstaged)
    if [[ -n "$STAGED_FILES" ]]; then
        echo "$STAGED_FILES" | grep "^$scope_path" | xargs -r git add 2>/dev/null || true
    fi

    # Also add any unstaged files in this scope
    git diff --name-only | grep "^$scope_path" | xargs -r git add 2>/dev/null || true

    # Get the diff for this scope
    diff=$(git diff --cached)

    if [[ -z "$diff" ]]; then
        echo "  No changes to commit for $scope"
        continue
    fi

    # Generate commit message using mods
    echo "  Generating commit message..."
    context="### Git Diff
$diff

### Scope
$scope"

    message=$(echo "$context" | mods -R write-commit)

    echo ""
    echo "Commit message:"
    echo "$message"
    echo ""

    # Confirm and commit
    if gum confirm "Commit changes for $scope?"; then
        git commit -m "$message"
        echo "✓ Committed changes for $scope"

        # Remove committed files from the saved staged files list
        STAGED_FILES=$(echo "$STAGED_FILES" | grep -v "^$scope_path" || true)
    else
        echo "  Skipped $scope"
    fi

    echo ""
done

# Reset staging area at the end
git reset HEAD -- . 2>/dev/null || true

echo "Done!"
