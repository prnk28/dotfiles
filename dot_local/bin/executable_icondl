#!/bin/zsh

# executable_icondl - Icon downloader using macOSicons.com API
# Downloads icons to ~/.local/share/applications/icons

set -euo pipefail

# Configuration
API_KEY="${MACOSICONS_API_KEY:-}"
API_URL="https://api.macosicons.com/api/search"
CACHE_DIR="${HOME}/.cache/icondl"
ICONS_DIR="${HOME}/.local/share/applications/icons"
HITS_PER_PAGE=20

# Ensure directories exist
mkdir -p "$CACHE_DIR" "$ICONS_DIR"

# Check dependencies
check_dependencies() {
  local missing=()
  for cmd in fzf curl jq catimg; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      missing+=("$cmd")
    fi
  done
  if [[ ${#missing[@]} -gt 0 ]]; then
    echo "Error: Missing required commands: ${missing[*]}" >&2
    exit 1
  fi
}

# Get API key
get_api_key() {
  if [[ -z "$API_KEY" ]]; then
    echo "Error: MACOSICONS_API_KEY environment variable not set." >&2
    echo "Get your API key from https://docs.macosicons.com/api-management" >&2
    exit 1
  fi
  echo "$API_KEY"
}

# Slugify string for filename
slugify() {
  echo "$1" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//'
}

# List icons from API
list_icons() {
  local query="$1"
  local page="${2:-1}"
  local offset=$(( (page - 1) * HITS_PER_PAGE ))

  local response
  response=$(curl -s -X POST "$API_URL" \
    -H "Content-Type: application/json" \
    -H "x-api-key: $(get_api_key)" \
    -d "{\"query\": \"$query\", \"searchOptions\": {\"hitsPerPage\": $HITS_PER_PAGE, \"page\": $page, \"offset\": $offset}}")

  if [[ $? -ne 0 || -z "$response" ]]; then
    echo "Error: Failed to fetch icons for query '$query'" >&2
    exit 1
  fi

  echo "$response" | jq -r '.hits[] | "\(.appName)\t\(.credit)\t\(.downloads)\t\(.iOSUrl // .lowResPngUrl // .icnsUrl)\t\(.icnsUrl)"' 2>/dev/null || {
    echo "Error: Invalid API response" >&2
    exit 1
  }
}

# Preview icon
preview_icon() {
  local app_name="$1"
  local credit="$2"
  local downloads="$3"
  local png_url="$4"
  local icns_url="$5"

  local cache_file="$CACHE_DIR/$(slugify "$app_name").png"

  # Download preview image if not cached
  if [[ ! -f "$cache_file" ]]; then
    if [[ -n "$png_url" ]]; then
      curl -s "$png_url" -o "$cache_file" 2>/dev/null || rm -f "$cache_file"
    fi
  fi

  # Display preview
  if [[ -f "$cache_file" ]]; then
    echo "App: $app_name"
    echo "Creator: $credit"
    echo "Downloads: $downloads"
    echo ""
    catimg "$cache_file" 2>/dev/null || echo "Preview image not available"
  else
    echo "App: $app_name"
    echo "Creator: $credit"
    echo "Downloads: $downloads"
    echo "Preview not available"
  fi
}

# Download icon
download_icon() {
  local app_name="$1"
  local credit="$2"
  local png_url="$3"
  local icns_url="$4"

  local base_name
  base_name=$(slugify "$app_name")
  local icon_path="$ICONS_DIR/$base_name.png"

  # Handle duplicates
  local counter=1
  while [[ -f "$icon_path" ]]; do
    icon_path="$ICONS_DIR/$base_name-$counter.png"
    ((counter++))
  done

  # Download the best available image
  local download_url="$png_url"
  if [[ -z "$download_url" ]]; then
    download_url="$icns_url"
  fi

  if [[ -n "$download_url" ]]; then
    if curl -s "$download_url" -o "$icon_path" 2>/dev/null; then
      echo "Downloaded $app_name to $icon_path"
      echo "Credit: macOSicons.com and $credit"
    else
      echo "Error: Failed to download $app_name" >&2
      exit 1
    fi
  else
    echo "Error: No download URL available for $app_name" >&2
    exit 1
  fi
}

# Main fzf interface
main() {
  check_dependencies

  local fzf_bind="enter:execute(echo {1} {2} {3} {4} {5} | xargs -n5 $0 --download),space:execute(echo {1} {2} {3} {4} {5} | xargs -n5 $0 --download --open)"
  local fzf_preview="echo {1} {2} {3} {4} {5} | xargs -n5 $0 --preview"
  local fzf_height=90%
  local fzf_preview_window=top:60%:wrap

  clear
  gum style --align center --padding "0 1" --foreground 51 --border double --border-foreground 51 "ó°ƒ¤ Icon Downloader"

  # Use fzf in phony mode for live search
  fzf \
    --phony \
    --bind "change:reload:$0 --list {q}" \
    --bind "$fzf_bind" \
    --preview "$fzf_preview" \
    --preview-window "$fzf_preview_window" \
    --height "$fzf_height" \
    --header "Search icons | Enter: download | Space: download and open" \
    --no-hscroll

  clear
}

# Handle subcommands
case "${1:-}" in
  --list)
    list_icons "${2:-}" "${3:-1}"
    ;;
  --preview)
    shift
    preview_icon "$@"
    ;;
  --download)
    shift
    download_icon "$@"
    ;;
  *)
    main "$@"
    ;;
esac